// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace KubernetesService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ExternalAdmissionHook describes an external admission webhook and the
    /// resources and operations it applies to.
    /// </summary>
    public partial class Iok8sapiadmissionregistrationv1alpha1ExternalAdmissionHook
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiadmissionregistrationv1alpha1ExternalAdmissionHook class.
        /// </summary>
        public Iok8sapiadmissionregistrationv1alpha1ExternalAdmissionHook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiadmissionregistrationv1alpha1ExternalAdmissionHook class.
        /// </summary>
        /// <param name="clientConfig">ClientConfig defines how to communicate
        /// with the hook. Required</param>
        /// <param name="name">The name of the external admission webhook. Name
        /// should be fully qualified, e.g., imagepolicy.kubernetes.io, where
        /// "imagepolicy" is the name of the webhook, and kubernetes.io is the
        /// name of the organization. Required.</param>
        /// <param name="failurePolicy">FailurePolicy defines how unrecognized
        /// errors from the admission endpoint are handled - allowed values are
        /// Ignore or Fail. Defaults to Ignore.</param>
        /// <param name="rules">Rules describes what operations on what
        /// resources/subresources the webhook cares about. The webhook cares
        /// about an operation if it matches _any_ Rule.</param>
        public Iok8sapiadmissionregistrationv1alpha1ExternalAdmissionHook(Iok8sapiadmissionregistrationv1alpha1AdmissionHookClientConfig clientConfig, string name, string failurePolicy = default(string), IList<Iok8sapiadmissionregistrationv1alpha1RuleWithOperations> rules = default(IList<Iok8sapiadmissionregistrationv1alpha1RuleWithOperations>))
        {
            ClientConfig = clientConfig;
            FailurePolicy = failurePolicy;
            Name = name;
            Rules = rules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets clientConfig defines how to communicate with the hook.
        /// Required
        /// </summary>
        [JsonProperty(PropertyName = "clientConfig")]
        public Iok8sapiadmissionregistrationv1alpha1AdmissionHookClientConfig ClientConfig { get; set; }

        /// <summary>
        /// Gets or sets failurePolicy defines how unrecognized errors from the
        /// admission endpoint are handled - allowed values are Ignore or Fail.
        /// Defaults to Ignore.
        /// </summary>
        [JsonProperty(PropertyName = "failurePolicy")]
        public string FailurePolicy { get; set; }

        /// <summary>
        /// Gets or sets the name of the external admission webhook. Name
        /// should be fully qualified, e.g., imagepolicy.kubernetes.io, where
        /// "imagepolicy" is the name of the webhook, and kubernetes.io is the
        /// name of the organization. Required.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets rules describes what operations on what
        /// resources/subresources the webhook cares about. The webhook cares
        /// about an operation if it matches _any_ Rule.
        /// </summary>
        [JsonProperty(PropertyName = "rules")]
        public IList<Iok8sapiadmissionregistrationv1alpha1RuleWithOperations> Rules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ClientConfig == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientConfig");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (ClientConfig != null)
            {
                ClientConfig.Validate();
            }
        }
    }
}
